编程的概念
====================

----

    本章中你将学到： ::

        名字（Name） 输入 输出 数据 指令 函数 函数定义 print

----

概念中的程序
--------------------

所谓编程，就是与电脑对话，告诉电脑应该做些什么，以及怎么做。

从这个角度来看，编程很像是写菜谱。我们以番茄炒蛋的菜谱为例：

.. topic :: 番茄炒蛋

    **材料** ：
     西红柿，鸡蛋，小葱，白砂糖，盐，味精，食用油

    **做法步骤** ：
     1. 将番茄洗净并切块
     2. 把鸡蛋打入碗中，加入少许盐，打散备用
     3. 小葱洗净后切成葱花
     4. 炒锅内倒少许油烧至微热，倒入鸡蛋快速划散，凝固后盛出
     5. 炒锅内重新倒少许油烧至七成热，倒入番茄块大火煸炒，加入白糖炒匀
     6. 加入鸡蛋和番茄一起翻炒，最后加入少许盐和味精，出锅前撒上葱花

这毫无疑问就是一段程序。只要能看懂这份菜谱，并且会使用厨具和炉灶，人也好电脑也好，都应该可以按这份菜谱做出番茄炒蛋。


    编程就是给出一系列需要电脑执行的指令（Instruction）。

    -- Imperative Programming


我们来仔细看下菜谱的构成：

    标题，也就是“番茄炒蛋”。

    然后是材料，我们也可以称之为 *输入* 。

    再然后是做法步骤，也就是一系列 *指令* 。

    还有一些东西没有明显的写出来：比如最后的成品番茄炒蛋，这是 *输出* ；还有各种厨具、炉灶（或者说整个厨房），这是 *运行环境* 。

标题，输入，指令，输出，以及运行环境，真正的电脑程序同样由这些要素构成。

我们按照指令进行一系列操作，材料就变成了佳肴（如果成功的话）。如果我们仔细观察这一过程： ::

  番茄 → 洗好的番茄 → 番茄块 → 番茄炒蛋
                                 ↑
  鸡蛋 → 打好并调味的鸡蛋  →  炒过的鸡蛋

也就是说， *输入* 经过一系列 *指令* 操作，变成了 *输出* 。

在电脑程序中，我们将输入和输出，以及在操作过程中的中间形态，都统称为 *数据* 。

    编程就是对数据进行变换与传输（Transition）。

    -- Functional Programming

还有一点需要特别注意，在上面的菜谱中，无论是一开始的生鸡蛋，还是打好的鸡蛋，或是炒过的鸡蛋，都是用“鸡蛋”两个字来代表的，这两个字并不是任何鸡蛋的任何一种形态，而只是一个用来代表它们的 *名字* ，这个概念是下一节的重点。


真正的程序
--------------------

是时候看一个真正的程序了。从这里开始，如果没有特别说明，我们提到程序就是指Python程序。也就是用Python语言编写的程序。

这种时候，大部分Python书籍里都会为你介绍声名显赫的 ``Hello, world!`` ：

.. code-block:: python

    print('Hello, world!')

然而这根本算不上一个真正的程序。本书作为一本负责任的教材，会告诉你真正的程序至少也要像下面这样：

.. code-block:: python

    # coding: utf-8
    """first program
    """
    from sys import stdout

    def main():
        stdout.write('Hello, world!\n')

    if __name__ == '__main__':
        main()

也许一眼看上去感觉高深莫测，但实际上这个程序比番茄炒蛋还要简单许多。它甚至没有（严格意义上的）输入和输出！

目前我们只需要关心其中的一行代码（code）。除此之外的部分，请你暂时看做是背景，或者说模板。

.. sidebar:: 说明

    *代码* 大体上就是程序的同义词，但强调了程序的神秘一面。

.. code-block:: python

    stdout.write('Hello, world!\n')

你也许能猜到这行代码的意思是：

    让 ``stdout`` 来 ``write`` 一些东西：``'Hello, world!\n'``

然而还有很多问题需要搞清楚：

  + 这个 ``stdout`` 到底是什么鬼？
  + 这个 ``write`` 是 *写* 在哪里？
  + 这个 ``'Hello, world!\n'`` 里面的 ``\n`` 是什么？

在解释这3个问题之前先来澄清一下，这行代码的实际意思是：

    向 ``stdout`` 里面 ``write`` 一些东西：``'Hello, world!\n'``

.. sidebar:: 说明

    这里的语序不符合平常的习惯，但并非所有的程序都如此，后面也会提到这是由于 *语义* 是通过程序来赋予的。

接下来是 ``stdout`` ，大名叫做 *标准输出* ，你可以简单理解为电脑屏幕。

至于 ``\n`` ，就相当于按一下键盘上的回车键，也就是换行。

现在应该明白了吧，这行代码在说：

    在电脑屏幕上显示 ``'Hello, world!'`` 并且换行。

.. topic ::   Exercise 1

    实际运行上面的程序，验证我们的猜想

.. topic ::   Exercise 2

    删除 ``\n`` 后重新运行程序，看看有什么不同


名字与值
---------

在上面程序中， ``stdout`` 代表 *标准输出* ， ``write`` 代表 *写* 这个操作。我们说 ``stdout`` 和 ``write`` 都是 *名字（Name）* ，*标准输出* 和 *写* 操作分别是它们的 *值（Value）* 。而 ``'Hello, world!\n'`` 本身就是一个 *值* 。这里我们知道了两点：

  1. 我们可以用 *名字* 来代表 *值*
  2. *值* 可以是各种各样的东西，比如文字、操作、电脑屏幕等等

至于为什么 ``stdout`` 就能代表 *标准输出* ， ``write`` 就能代表 *写* 操作，我们以后再做解释。现在我们先来代表一下 ``'Hello, world!'`` 。

.. code-block:: python

    # coding: utf-8
    """your name.
    """
    from sys import stdout

    def main():
        text = 'Hello, world!'
        stdout.write(text)
        stdout.write('\n')

    if __name__ == '__main__':
        main()


.. topic :: Exercise 3

    猜测上面程序的运行结果，并实际运行程序验证你的猜想

这个例子中，我们用 `text` 来代表 `'Hello, world!'` ，我们也可以用 `text` 来代表别的文字：

.. code-block:: python

    # coding: utf-8
    """name and value
    """
    from sys import stdout

    def main():
        text = '我要学编程。'
        stdout.write(text)
        stdout.write('\n')

    if __name__ == '__main__':
        main()

只要在程序中修改 `text` 所代表的值，就可以在屏幕上显示任何我们想要的文字。

.. topic :: Exercise 4

     修改上面的程序，显示3行不同的文字。


消除程序中的重复
--------------------

在前面的练习中，你应该写出类似下面的程序了吧：

.. code-block:: python

    # coding: utf-8
    """name and value
    """
    from sys import stdout

    def main():
        text = '第1行文字'
        stdout.write(text)
        stdout.write('\n')

        text = '第2行文字'
        stdout.write(text)
        stdout.write('\n')

        text = '第3行文字'
        stdout.write(text)
        stdout.write('\n')

    if __name__ == '__main__':
        main()

即使是复制粘贴，3行3行重复的程序也让人厌烦。为了消除重复，我们可以把程序改写成下面这样：

.. code-block:: python

    # coding: utf-8
    """name and value
    """
    from sys import stdout

    def print(text):
        stdout.write(text)
        stdout.write('\n')

    def main():
        print('第1行文字')
        print('第2行文字')
        print('第3行文字')

    if __name__ == '__main__':
        main()

.. topic :: Exercise 5

    实际运行上面的程序，看看运行结果是否有变化

这里我们搞出了一个新的 *名字* ``print`` 。 ``print`` 所代表的 *值* 是一个 ``函数`` 。 ``函数`` 是从数学里借来的概念：

    *y* = *f(x)*

这表示我们给 ``f`` 一个 ``x`` ， ``f`` 就会给我们一个相应的 ``y`` 。我们也可以把 ``x`` 叫做 *输入* ， ``y`` 叫做 *输出* 。

至于怎样的 ``x`` 会对应怎样的 ``y`` ，我们需要知道具体的 *函数定义* ，比如：

    *f(x)* = *x*:sup:`2`

有了这个定义，我们就知道 ``f(1)`` 会得到 ``1`` ， ``f(2)`` 会得到 ``4`` ，而 ``f(3)`` 会得到 ``9`` 。

像数学里的函数一样，我们给 ``print`` 不同的输入，``print`` 就会给我们相应的输出。不太一样的是，我们的 ``print`` 并非进行数字计算，而是做了其它操作。

这里就是 ``print`` 的 *函数定义* ：

.. code-block:: python

    def print(text):
        stdout.write(text)
        stdout.write('\n')

可以看到这与数学中 ``f(x) = ...`` 形式并不相同，但第一行中的 ``print(text):`` 与 ``f(x) =`` 多少有些相似。 这里的名字 ``text`` 代表的就是 ``print`` 的输入数据。当你写下 ``print('第1行文字')`` ，就相当于：

.. code-block:: python

        stdout.write('第1行文字')
        stdout.write('\n')

可见，这里我们用一个名字 ``print`` 代表一个函数，从而消除了若干行重复的程序。我们可以说是利用 *函数* 消除了重复，也可以说是利用代表函数的 *名字* 消除了重复。

很多书把这种消除重复的过程叫做 *抽象（Abstraction）* 。这可能是编程中最常做的事情之一，也是编程最需要的能力之一。

    编程就是消除重复的过程（Abstraction）。

    -- Refactoring

那么 ``print`` 作为一个函数，它的输出是什么呢？有人会说它的输出就是屏幕上显示出的文字，这不失为一种解释。但从严肃的学术角度来说，屏幕上的文字并不能作为函数的输出。我们把这个辨析作为思考题，参考答案会在下一章给出。

.. topic :: Exercise 6

    请思考：为什么说屏幕上的文字不能作为 ``print`` 的输出？ ``print`` 真正的输出是什么？


Python程序的模板
--------------------

本章的最后，我们正式给出Python程序的模板：

.. code-block:: python

    # coding: utf-8
    """ ① 在这里写一些对程序的说明
    """
    # ② 在这里写import，下一章会介绍

    def main():
        # ③ 在这里写你的代码

    if __name__ == '__main__':
        main()

请把上面这些代码存成一个文件。后面的章节里会经常提到“把某某代码放进程序模板”，这时就请你把这个文件复制一份并改个名字，把“某某代码”放在 ``def main():`` 下方③的位置。如果你的代码没有其它问题，这个文件就应该是一个可以执行的Python程序。至于程序执行的结果，还是需要你自己通过观察来检验。
